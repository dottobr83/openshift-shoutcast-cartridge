#!/bin/bash

# Source utility functions.
source $OPENSHIFT_CARTRIDGE_SDK_BASH

source "${OPENSHIFT_SCS_DIR}/lib/shoutinterface"

env_dir="${OPENSHIFT_SCS_DIR}/env"

STOPTIMEOUT=10
FMT="%a %b %d %Y %H:%M:%S GMT%z (%Z)"
	
function is_shoutcast_running() {
#create a stats file and test if server is up and running
	if ! -f ${OPENSHIFT_SCS_PID} ; then
		return 0
	else
		return 1
	fi
}

function save_about_gear() {
	#up count or create 
	#CONTENT = $3
	#if ! -f ${OPENSHIFT_DATA_DIR}/gear/$1/$2.txt ; then
	#echo "${CONTENT}" > ${OPENSHIFT_DATA_DIR}/gear/$1/$2.txt
	GEARNUM=$(get_count)
	set_info "GEAR_${GEARNUM}_CONNECTURL" "${OPENSHIFT_GEAR_UUID}-${OPENSHIFT_GEAR_NAME}.rhcloud.com"
	#fi
}

# not sure what client_result does...
function status() {
    if is_shoutcast_running ; then
        client_result "Application is running"
		tail -1 ${OPENSHIFT_LOG_DIR}/shout.log >${OPENSHIFT_LOG_DIR}/shout2.log && mv ${OPENSHIFT_LOG_DIR}/shout2.log ${OPENSHIFT_LOG_DIR}/shout.log
		tail ${OPENSHIFT_LOG_DIR}/shout.log | client_result
    else
        client_result "Application is not running"
    fi
}

function start() {
SHOUTCAST_CONF=${OPENSHIFT_SCS_SHOUTCAST_CONF}

#default config for starting up
read -d '' FileContent << "ENDREAD"
adminpassword=adminpass
password=pass
maxuser=64
publicserver=default
requirestreamconfigs=1
streamadminpassword_1=mainstream
streamid_1=1
streampassword_1=main
publicport=80
portlegacy=0
srcip=any

ENDREAD
	
	if ! -f ${SHOUTCAST_DIR}/mode.txt ; then
		echo "NORMAL" > ${SHOUTCAST_DIR}/mode.txt
	fi
	
	SERVER_TYPE="$(<${SHOUTCAST_DIR}/mode.txt)"
	
	if ! -f ${SHOUTCAST_DIR}/settings.txt ; then
		#default for starting up properly
		echo "${FileContent}" > ${SHOUTCAST_DIR}/settings.txt
		echo "portbase=${OPENSHIFT_SCS_PORT}" >>${SHOUTCAST_DIR}/settings.txt
		echo "destip=${OPENSHIFT_SCS_IP}" >>${SHOUTCAST_DIR}/settings.txt
		echo "publicip=${OPENSHIFT_APP_DNS}" >>${SHOUTCAST_DIR}/settings.txt
	fi
	
	FileContent="$(<${SHOUTCAST_DIR}/settings.txt)"
	
	if ! -f ${SHOUTCAST_DIR}/sc_NORMAL.conf ; then
		echo "${FileContent}" >${SHOUTCAST_DIR}/sc_NORMAL.conf
		echo "publicip=${OPENSHIFT_APP_DNS}" >>${SHOUTCAST_DIR}/sc_NORMAL.conf
	fi
	
	#All gears have a relay on port 8080 connecting to /shoutcast which should be the main server
	if ! -f ${SHOUTCAST_DIR}/sc_RELAY.conf ; then
		echo "${FileContent}" >${SHOUTCAST_DIR}/sc_RELAY.conf
		echo "relayserver=${OPENSHIFT_APP_DNS}/shoutcast" >>${SHOUTCAST_DIR}/sc_RELAY.conf
		echo "relayport=80" >>${SHOUTCAST_DIR}/sc_RELAY.conf
		
	fi
	
	if ! -f ${SHOUTCAST_DIR}/sc_RELAYONLY.conf ; then
		echo "${FileContent}" >${SHOUTCAST_DIR}/sc_RELAYONLY.conf
		echo "relayserver=${OPENSHIFT_APP_DNS}" >>${SHOUTCAST_DIR}/sc_RELAYONLY.conf
		echo "relayport=80" >>${SHOUTCAST_DIR}/sc_RELAYONLY.conf
	fi

#copy over the config to the new file
cp ${SHOUTCAST_DIR}/sc_${SERVER_TYPE}.conf ${SHOUTCAST_CONF}
#run the server
nohup ${SHOUTCAST_DIR}/sc_serv ${SHOUTCAST_CONF} > ${OPENSHIFT_LOG_DIR}\shout.log 2>&1 &
ps -ef | grep sc_serv | grep -v grep>jobline
job=`awk '{ print $2 }' jobline`
echo "$job" >${SHOUTCAST_DIR}/stream.pid
rm -f jobline
client_result "PID $job copied to stream.pid Shoutcast has Started."
}

#add a relay 
function scale-up() {
	echo
}

#find least used gear and kill it
function scale-down() {
	echo
}

function stop() {

if [ -z "$(ps -ef | grep sc_serv | grep -v grep)" ] ; then
    client_result "SHOUTcast is already stopped"
else
	kill `ps -ef | grep sc_serv | grep -v grep | awk '{ print $2 }'` > /dev/null 2>&1
	client_result "SHOUTcast stopped"
fi

}

function restart() {
	stop
	start
}

function build() {
    echo
}

function post-deploy() {
    echo
}

function pre-build() {
    echo
}
#clean out logs
function tidy() {
  client_message "Emptying Log Dir: $OPENSHIFT_SCS_DIR/logs"
  shopt -s dotglob
  rm -rf $OPENSHIFT_SCS_DIR/logs/*
  rm -rf $OPENSHIFT_SCS_DIR/tmp/*
}

#
#  main():
#

# Ensure arguments.
if ! [ $# -eq 1 ]; then
    echo "Usage: $0 [start|restart|graceful|graceful-stop|stop|status]"
    exit 1
fi

# Handle commands.
case "$1" in
    start)               start       ;;
    restart|graceful)    restart     ;;
    graceful-stop|stop)  stop        ;;
    status)              status      ;;
    build)               build       ;;
    pre-build)           pre-build   ;;
    post-deploy)         post-deploy ;;
    tidy)                tidy        ;;
	scale-up)            scale-up    ;;
	scale-down)          scale-down  ;;
    *) exit 0;
esac